# SafeRoute Operations Dashboard

A comprehensive fleet management and operations dashboard built with Blazor Server for tracking drivers, routes, deliveries, and safety metrics across South Africa.

## 🚀 Overview

SafeRoute Operations Dashboard is a real-time fleet management system designed specifically for South African delivery operations. The dashboard provides live tracking of drivers, route optimization, analytics, and safety monitoring with seamless integration to mobile driver applications.

## ✨ Features

### 📊 Dashboard
- Real-time fleet overview with KPI metrics
- Live driver tracking on interactive map
- Active driver sidebar with detailed status
- Driver location updates and route progress
- Fleet safety score monitoring
- Alert notifications system

### 👥 Driver Management
- Comprehensive driver profiles with South African contact details
- Status tracking (Active, On Break, Offline, Emergency)
- Performance metrics (deliveries, distance in km, on-duty hours)
- Risk score calculation
- Quick actions (contact, view route, view details)
- Search and filter capabilities

### 🗺️ Route Management
- Route planning and optimization
- Live route progress tracking
- Stop-by-stop delivery monitoring
- Distance calculation in kilometres
- Estimated time of arrival (ETA)
- Reorder stops with drag-and-drop
- Route history and analytics

### 📈 Analytics & Reports
- Daily performance metrics
- Fuel efficiency tracking (L/100km)
- Delivery time analysis
- Customer ratings overview
- Cost per delivery in South African Rand (ZAR)
- Revenue analysis and trends
- Driver performance comparison charts
- Exportable reports (PDF, Excel)

### 🛡️ Safety Reports
- Fleet safety score dashboard
- Real-time alert system
- Incident tracking and reporting
- Risk factor analysis (time, location, traffic, weather)
- Predictive risk insights
- Emergency button integration
- Incident history with South African locations

### ⚙️ Settings
- System configuration
- User and permission management
- Mobile app settings and sync preferences
- Notification preferences
- API integrations
- Appearance customization

## 🌍 South African Localization

This application is fully localized for South African operations:

- **Distance**: Kilometres (km)
- **Fuel Efficiency**: Litres per 100km (L/100km)
- **Currency**: South African Rand (R/ZAR)
- **Phone Numbers**: +27 format
- **Date Format**: DD/MM/YYYY
- **Time Format**: 24-hour clock (14:45) or 12-hour with AM/PM
- **Addresses**: South African format with suburbs and postal codes
- **Locations**: Major SA cities (Cape Town, Johannesburg, Durban, Pretoria)
- **Speed Limits**: km/h (60/80/120)
- **Language**: British English spelling

## 🛠️ Technology Stack

- **.NET 8** - Latest LTS framework
- **Blazor Server** - Interactive server-side rendering
- **SignalR** - Real-time communication
- **MudBlazor** - Material Design component library
- **C#** - Primary programming language
- **Entity Framework Core** - Data access (optional)

## 📋 Prerequisites

- [.NET 8 SDK](https://dotnet.microsoft.com/download/dotnet/8.0) or later
- [Visual Studio 2022](https://visualstudio.microsoft.com/) (17.8 or later) or [Visual Studio Code](https://code.visualstudio.com/)
- SQL Server (optional, for database integration)

## 🚀 Getting Started

### Installation

1. **Clone the repository**
```bash
   git clone https://github.com/your-org/saferoute-dashboard.git
   cd saferoute-dashboard
```

2. **Restore NuGet packages**
```bash
   dotnet restore
```

3. **Build the solution**
```bash
   dotnet build
```

4. **Run the application**
```bash
   dotnet run
```

5. **Access the dashboard**
   - Navigate to `https://localhost:5001` or `http://localhost:5000`
   - Default credentials: (if authentication is implemented)
     - Username: `admin@saferoute.co.za`
     - Password: `Admin123!`

## 📁 Project Structure
```
SafeRouteApp/
├── Components/
│   ├── Layout/
│   │   ├── MainLayout.razor          # Main application layout
│   │   ├── NavMenu.razor             # Sidebar navigation
│   │   └── TopBar.razor              # Header with search and notifications
│   ├── Pages/
│   │   ├── Dashboard.razor           # Home page with overview
│   │   ├── Drivers.razor             # Driver management page
│   │   ├── Routes.razor              # Route management page
│   │   ├── Analytics.razor           # Analytics and reports page
│   │   ├── SafetyReports.razor       # Safety monitoring page
│   │   └── Settings.razor            # System settings page
│   └── Shared/
│       ├── KpiCard.razor             # Reusable KPI metric card
│       ├── DriverCard.razor          # Driver information card
│       ├── AlertCard.razor           # Alert notification card
│       ├── StatusBadge.razor         # Status indicator component
│       └── FilterBar.razor           # Search and filter component
├── Models/
│   ├── Driver.cs                     # Driver data model
│   ├── Route.cs                      # Route data model
│   ├── Alert.cs                      # Alert data model
│   ├── Analytics.cs                  # Analytics data model
│   └── SafetyMetrics.cs              # Safety metrics model
├── Services/
│   ├── IDriverService.cs             # Driver service interface
│   ├── DriverService.cs              # Driver service implementation
│   ├── IRouteService.cs              # Route service interface
│   ├── RouteService.cs               # Route service implementation
│   ├── IAlertService.cs              # Alert service interface
│   ├── AlertService.cs               # Alert service implementation
│   ├── IAnalyticsService.cs          # Analytics service interface
│   ├── AnalyticsService.cs           # Analytics service implementation
│   ├── ISafetyService.cs             # Safety service interface
│   └── SafetyService.cs              # Safety service implementation
├── Hubs/
│   └── DashboardHub.cs               # SignalR hub for real-time updates
├── Utilities/
│   └── SouthAfricanFormatters.cs     # SA-specific formatting helpers
├── wwwroot/
│   ├── css/
│   │   └── app.css                   # Custom styles
│   └── js/
│       └── app.js                    # Custom JavaScript
├── appsettings.json                  # Application configuration
├── Program.cs                        # Application entry point
└── README.md                         # This file
```

## 🔌 API Integration

The dashboard is designed to integrate seamlessly with a mobile driver application. All data operations go through service interfaces that can be easily connected to REST APIs.

### Mobile App Integration Points

1. **Driver Location Updates**
   - Endpoint: `POST /api/drivers/{id}/location`
   - Frequency: Every 30 seconds when app is active
   - Payload: GPS coordinates, timestamp

2. **Status Updates**
   - Endpoint: `PUT /api/drivers/{id}/status`
   - Triggers: App start/stop, break start/end, emergency button
   - Payload: Status (active/break/offline/emergency)

3. **Delivery Completion**
   - Endpoint: `POST /api/deliveries/{id}/complete`
   - Triggers: Driver marks delivery as complete
   - Payload: Completion time, photo proof, signature

4. **Route Progress**
   - Endpoint: `PUT /api/routes/{id}/progress`
   - Frequency: Each stop completion
   - Payload: Current stop, timestamp, location

5. **Safety Events**
   - Endpoint: `POST /api/safety/events`
   - Triggers: Emergency button, harsh braking, speeding
   - Payload: Event type, severity, location, timestamp

### Example Service Implementation
```csharp
public class DriverService : IDriverService
{
    private readonly HttpClient _httpClient;
    
    public async Task<List<Driver>> GetAllDriversAsync()
    {
        // Replace mock data with actual API call
        return await _httpClient.GetFromJsonAsync<List<Driver>>("api/drivers");
    }
    
    public async Task<bool> UpdateDriverLocationAsync(string driverId, LocationData location)
    {
        var response = await _httpClient.PostAsJsonAsync($"api/drivers/{driverId}/location", location);
        return response.IsSuccessStatusCode;
    }
}
```

## ⚡ Real-Time Updates (SignalR)

The dashboard uses SignalR for real-time data synchronization with the mobile app.

### Hub Methods
```csharp
public class DashboardHub : Hub
{
    // Called by mobile app to update driver location
    public async Task UpdateDriverLocation(string driverId, LocationData location)
    {
        await Clients.All.SendAsync("DriverLocationUpdated", driverId, location);
    }
    
    // Called by mobile app to send new alert
    public async Task SendAlert(Alert alert)
    {
        await Clients.All.SendAsync("NewAlertReceived", alert);
    }
    
    // Called by mobile app to update delivery count
    public async Task IncrementDelivery(string driverId)
    {
        await Clients.All.SendAsync("DeliveryCompleted", driverId);
    }
}
```

### Client-Side Usage
```csharp
@implements IAsyncDisposable

private HubConnection? hubConnection;

protected override async Task OnInitializedAsync()
{
    hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/dashboardhub"))
        .Build();
        
    hubConnection.On<string, LocationData>("DriverLocationUpdated", async (driverId, location) =>
    {
        await RefreshDriverLocation(driverId, location);
        StateHasChanged();
    });
    
    await hubConnection.StartAsync();
}
```

## 🎨 Theming & Customization

The application uses a strict **black and white** color scheme:

- **Primary Black**: `#000000` or `#1F2937` (headers, buttons, text)
- **White**: `#FFFFFF` (backgrounds, button text)
- **Gray Shades**: `#F5F5F5` (page background), `#E5E7EB` (borders), `#6B7280` (secondary text)

### Customizing Colors

Edit `wwwroot/css/app.css`:
```css
:root {
    --primary-black: #000000;
    --secondary-black: #1F2937;
    --white: #FFFFFF;
    --light-gray: #F5F5F5;
    --border-gray: #E5E7EB;
    --text-gray: #6B7280;
}
```

## 🔐 Authentication & Security

### Implementing Authentication

1. Add authentication packages:
```bash
   dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer
```

2. Configure in `Program.cs`:
```csharp
   builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
       .AddJwtBearer(options => { /* configuration */ });
```

3. Protect pages with `@attribute [Authorize]`

### Role-Based Access Control
```csharp
@attribute [Authorize(Roles = "Admin,Manager")]
```

Available roles:
- **Admin**: Full system access
- **Manager**: View and manage all data
- **Dispatcher**: Route and driver management
- **Viewer**: Read-only access

## 📊 Database Configuration

### Using SQL Server

1. Update `appsettings.json`:
```json
   {
     "ConnectionStrings": {
       "DefaultConnection": "Server=localhost;Database=SafeRouteDB;Trusted_Connection=True;MultipleActiveResultSets=true"
     }
   }
```

2. Add Entity Framework:
```bash
   dotnet add package Microsoft.EntityFrameworkCore.SqlServer
   dotnet add package Microsoft.EntityFrameworkCore.Tools
```

3. Create DbContext:
```csharp
   public class SafeRouteDbContext : DbContext
   {
       public DbSet<Driver> Drivers { get; set; }
       public DbSet<Route> Routes { get; set; }
       public DbSet<Alert> Alerts { get; set; }
   }
```

4. Run migrations:
```bash
   dotnet ef migrations add InitialCreate
   dotnet ef database update
```

## 🧪 Testing

### Running Tests
```bash
dotnet test
```

### Unit Testing Example
```csharp
[Fact]
public async Task GetAllDrivers_ReturnsDriverList()
{
    // Arrange
    var service = new DriverService();
    
    // Act
    var drivers = await service.GetAllDriversAsync();
    
    // Assert
    Assert.NotNull(drivers);
    Assert.True(drivers.Count > 0);
}
```

## 📱 Mobile App Requirements

The mobile driver application should:

1. **Send location updates** every 30 seconds when active
2. **Use South African phone number format** (+27)
3. **Calculate distances in kilometres**
4. **Track fuel consumption in litres**
5. **Record delivery costs in ZAR**
6. **Submit timestamps in UTC** (convert to SA time: UTC+2)
7. **Include device ID** for tracking
8. **Support offline mode** with data queuing
9. **Capture proof of delivery** (photos, signatures)
10. **Implement emergency button** for immediate alerts

### Example Mobile API Call
```javascript
// POST /api/drivers/driver-001/location
{
  "driverId": "driver-001",
  "latitude": -33.9249,
  "longitude": 18.4241,
  "address": "123 Long Street, Cape Town City Centre, Cape Town, 8001",
  "timestamp": "2024-10-15T14:30:00Z",
  "deviceId": "mobile-device-001",
  "appVersion": "1.0.5"
}
```

## 🚀 Deployment

### Deploying to Azure

1. **Create Azure App Service**
```bash
   az webapp create --resource-group SafeRoute --plan SafeRoutePlan --name saferoute-dashboard
```

2. **Publish the application**
```bash
   dotnet publish -c Release
```

3. **Deploy to Azure**
```bash
   az webapp deployment source config-zip --resource-group SafeRoute --name saferoute-dashboard --src publish.zip
```

### Deploying to IIS

1. Publish the application:
```bash
   dotnet publish -c Release -o ./publish
```

2. Copy `publish` folder to IIS server

3. Create new IIS site pointing to publish folder

4. Set application pool to "No Managed Code"

### Deploying with Docker
```dockerfile
FROM mcr.microsoft.com/dotnet/aspnet:8.0
WORKDIR /app
COPY publish/ .
ENTRYPOINT ["dotnet", "SafeRouteApp.dll"]
```

Build and run:
```bash
docker build -t saferoute-dashboard .
docker run -p 8080:80 saferoute-dashboard
```

## 🐛 Troubleshooting

### SignalR Connection Issues

**Problem**: Real-time updates not working

**Solution**: 
- Check firewall allows WebSocket connections
- Verify SignalR endpoint in browser console
- Ensure `app.MapHub<DashboardHub>("/dashboardhub");` in Program.cs

### Data Not Displaying

**Problem**: Pages show "Loading..." indefinitely

**Solution**:
- Check browser console for errors
- Verify service is registered in Program.cs
- Ensure async methods use `await`

### Mobile App Not Syncing

**Problem**: Dashboard not receiving mobile updates

**Solution**:
- Verify API endpoint URLs in mobile app
- Check CORS configuration in Program.cs
- Confirm SignalR hub is running
- Test API endpoints with Postman

## 📚 Additional Resources

- [Blazor Documentation](https://learn.microsoft.com/aspnet/core/blazor/)
- [MudBlazor Components](https://mudblazor.com/)
- [SignalR Documentation](https://learn.microsoft.com/aspnet/core/signalr/)
- [.NET 8 Documentation](https://learn.microsoft.com/dotnet/core/whats-new/dotnet-8)

## 🤝 Contributing

We welcome contributions! Please follow these steps:

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

### Code Style Guidelines

- Use C# naming conventions (PascalCase for classes/methods, camelCase for variables)
- Follow async/await patterns
- Add XML documentation comments to public methods
- Use British English spelling for SA context
- Include unit tests for new features

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 👥 Authors

- **Your Company Name** - *Initial work* - [YourCompany](https://github.com/yourcompany)

## 🙏 Acknowledgments

- MudBlazor team for the excellent component library
- Microsoft for Blazor and .NET
- South African delivery industry for requirements and feedback

## 📞 Support

For support, email support@saferoute.co.za or create an issue in the GitHub repository.

## 🗺️ Roadmap

### Planned Features

- [ ] **Advanced Analytics Dashboard** - ML-based delivery predictions
- [ ] **Customer Portal** - Real-time delivery tracking for customers
- [ ] **WhatsApp Integration** - Notifications via WhatsApp Business API
- [ ] **Multi-language Support** - Afrikaans, Zulu, Xhosa
- [ ] **Mobile App PWA** - Offline-first progressive web app
- [ ] **AI Route Optimization** - Machine learning for route planning
- [ ] **Fleet Maintenance Tracking** - Vehicle service scheduling
- [ ] **Driver Performance Gamification** - Leaderboards and rewards
- [ ] **Electronic Proof of Delivery** - Digital signatures and photos
- [ ] **Integration with SA Payment Gateways** - PayFast, Yoco, etc.

---

**Version**: 1.0.0  
**Last Updated**: October 2024  
**Built with** ❤️ **for South African fleet management**