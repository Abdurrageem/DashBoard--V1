@page "/analytics"
@rendermode InteractiveServer
@inject IAnalyticsService AnalyticsService
@inject IDriverService DriverService

<PageTitle>Analytics & Reports - SafeRoute Operations</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Style="padding: 32px 24px;">
    <PageHeader Title="Analytics & Reports"
                Subtitle="Performance metrics and insights"
                LastUpdateTime="@lastUpdateTime"
                IsSyncing="@isSyncing"
                OnRefresh="RefreshData">
        <ActionButtons>
            <MudButton Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.FileDownload"
                       Style="background-color: #1F2937; color: white;"
                       OnClick="ExportAnalytics">
                Export Analytics
            </MudButton>
        </ActionButtons>
    </PageHeader>

    @if (isLoading)
    {
        <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Style="min-height: 60vh;">
            <MudProgressCircular Color="Color.Default" Size="Size.Large" Indeterminate="true" Style="color: #1F2937;" />
            <MudText Typo="Typo.h6" Style="color: #6B7280;">Loading analytics...</MudText>
        </MudStack>
    }
    else
    {
        <MudText Typo="Typo.h5" Style="color: #1F2937; font-weight: 700; margin-bottom: 32px;">
            Analytics Dashboard - Coming Soon
        </MudText>
        
        <MudGrid Spacing="3">
            <MudItem xs="12">
                <EmptyState Icon="@Icons.Material.Filled.Analytics"
                           Title="Analytics Reports"
                           Description="Detailed performance metrics and insights will be available here" />
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    private bool isLoading = false;
    private bool isSyncing = false;
    private DateTime? lastUpdateTime = DateTime.Now;

    private async Task RefreshData()
    {
        isSyncing = true;
        await Task.Delay(500);
        lastUpdateTime = DateTime.Now;
        isSyncing = false;
    }

    private async Task ExportAnalytics()
    {
        await Task.Delay(100);
    }
}
