// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SafeRouteDashBoard.Data;

#nullable disable

namespace SafeRouteDashBoard.Migrations
{
    [DbContext(typeof(SafeRouteDbContext))]
    partial class SafeRouteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.CameraRecording", b =>
                {
                    b.Property<int>("RecordingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("recording_id");

                    b.Property<int?>("DetectionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("detection_id");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("file_path");

                    b.Property<int>("IncidentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("incident_id");

                    b.Property<string>("TriggerType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("trigger_type");

                    b.HasKey("RecordingId");

                    b.HasIndex("DetectionId");

                    b.HasIndex("IncidentId");

                    b.ToTable("CAMERA_RECORDINGS");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("company_id");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("registration_number");

                    b.HasKey("CompanyId");

                    b.ToTable("COMPANIES");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.Delivery", b =>
                {
                    b.Property<int>("DeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("delivery_id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int>("DriverId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("driver_id");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("risk_level");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.HasKey("DeliveryId");

                    b.HasIndex("DriverId");

                    b.ToTable("DELIVERIES");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.DeviceStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("status_id");

                    b.Property<int?>("BatteryLevel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("battery_level");

                    b.Property<int>("DriverId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("driver_id");

                    b.Property<bool>("GpsEnabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("gps_enabled");

                    b.HasKey("StatusId");

                    b.HasIndex("DriverId");

                    b.ToTable("DEVICE_STATUS");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.Dispatcher", b =>
                {
                    b.Property<int>("DispatcherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("dispatcher_id");

                    b.Property<string>("AssignedDrivers")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("assigned_drivers");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("DispatcherId");

                    b.HasIndex("UserId");

                    b.ToTable("DISPATCHERS");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("driver_id");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("current_status");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("DriverId");

                    b.HasIndex("UserId");

                    b.ToTable("DRIVERS");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.EmergencyContact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("contact_id");

                    b.Property<int>("DriverId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("driver_id");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("relationship");

                    b.HasKey("ContactId");

                    b.HasIndex("DriverId");

                    b.ToTable("EMERGENCY_CONTACTS");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.Geofence", b =>
                {
                    b.Property<int>("GeofenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("geofence_id");

                    b.Property<string>("PolygonCoordinates")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("polygon_coordinates");

                    b.Property<string>("ZoneType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("zone_type");

                    b.HasKey("GeofenceId");

                    b.ToTable("GEOFENCES");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.Incident", b =>
                {
                    b.Property<int>("IncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("incident_id");

                    b.Property<string>("AlertId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("alert_id");

                    b.Property<int>("DriverId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("driver_id");

                    b.Property<string>("EvidenceFiles")
                        .HasColumnType("TEXT")
                        .HasColumnName("evidence_files");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("severity");

                    b.HasKey("IncidentId");

                    b.HasIndex("DriverId");

                    b.ToTable("INCIDENTS");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.IncidentResponse", b =>
                {
                    b.Property<int>("IncidentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("incident_id");

                    b.Property<int>("DispatcherId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dispatcher_id");

                    b.Property<string>("ResponseType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("response_type");

                    b.HasKey("IncidentId", "DispatcherId");

                    b.HasIndex("DispatcherId");

                    b.ToTable("INCIDENT_RESPONSES");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.LocationUpdate", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("location_id");

                    b.Property<int>("DriverId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("driver_id");

                    b.Property<decimal>("Lat")
                        .HasPrecision(10, 7)
                        .HasColumnType("TEXT")
                        .HasColumnName("lat");

                    b.Property<decimal>("Lng")
                        .HasPrecision(10, 7)
                        .HasColumnType("TEXT")
                        .HasColumnName("lng");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT")
                        .HasColumnName("timestamp");

                    b.HasKey("LocationId");

                    b.HasIndex("DriverId");

                    b.ToTable("LOCATION_UPDATES");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.MonthlyReport", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("report_id");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("company_id");

                    b.Property<string>("RiskAnalysis")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("risk_analysis");

                    b.Property<string>("SafetyMetrics")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("safety_metrics");

                    b.HasKey("ReportId");

                    b.ToTable("MONTHLY_REPORTS");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.NotificationEntity", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("notification_id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("message");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("priority");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("NotificationId");

                    b.ToTable("NOTIFICATIONS");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.PanicAlert", b =>
                {
                    b.Property<int>("AlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("alert_id");

                    b.Property<int?>("AcknowledgedByDispatcher")
                        .HasColumnType("INTEGER")
                        .HasColumnName("acknowledged_by_dispatcher");

                    b.Property<string>("AlertType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("alert_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int>("DriverId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("driver_id");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("resolved_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.HasKey("AlertId");

                    b.HasIndex("AcknowledgedByDispatcher");

                    b.HasIndex("DriverId");

                    b.ToTable("PANIC_ALERTS");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.RiskZone", b =>
                {
                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("zone_id");

                    b.Property<string>("BoundaryCoordinates")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("boundary_coordinates");

                    b.Property<int?>("IncidentCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("incident_count");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("risk_level");

                    b.HasKey("ZoneId");

                    b.ToTable("RISK_ZONES");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.RouteEntity", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("route_id");

                    b.Property<string>("ActualPath")
                        .HasColumnType("TEXT")
                        .HasColumnName("actual_path");

                    b.Property<string>("PlannedWaypoints")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("planned_waypoints");

                    b.HasKey("RouteId");

                    b.ToTable("ROUTES");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.SafetyScore", b =>
                {
                    b.Property<int>("ScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("score_id");

                    b.Property<DateTime>("CalculatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("calculated_at");

                    b.Property<int>("DriverId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("driver_id");

                    b.Property<decimal>("OverallScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("overall_score");

                    b.Property<string>("Recommendations")
                        .HasColumnType("TEXT")
                        .HasColumnName("recommendations");

                    b.HasKey("ScoreId");

                    b.HasIndex("DriverId");

                    b.ToTable("SAFETY_SCORES");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.SystemLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("log_id");

                    b.Property<string>("LogType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("log_type");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT")
                        .HasColumnName("timestamp");

                    b.HasKey("LogId");

                    b.ToTable("SYSTEM_LOGS");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.ThreatDetection", b =>
                {
                    b.Property<int>("DetectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("detection_id");

                    b.Property<decimal>("ConfidenceScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("confidence_score");

                    b.Property<string>("ThreatType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("threat_type");

                    b.HasKey("DetectionId");

                    b.ToTable("THREAT_DETECTIONS");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.UserEntity", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("company_id");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("role");

                    b.HasKey("UserId");

                    b.HasIndex("CompanyId");

                    b.ToTable("USERS");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.ZoneEntry", b =>
                {
                    b.Property<int>("DriverId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("driver_id");

                    b.Property<int>("GeofenceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("geofence_id");

                    b.Property<bool>("AlertTriggered")
                        .HasColumnType("INTEGER")
                        .HasColumnName("alert_triggered");

                    b.HasKey("DriverId", "GeofenceId");

                    b.HasIndex("GeofenceId");

                    b.ToTable("ZONE_ENTRIES");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.CameraRecording", b =>
                {
                    b.HasOne("SafeRouteDashBoard.Data.Entities.ThreatDetection", "ThreatDetection")
                        .WithMany("CameraRecordings")
                        .HasForeignKey("DetectionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SafeRouteDashBoard.Data.Entities.Incident", "Incident")
                        .WithMany("CameraRecordings")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incident");

                    b.Navigation("ThreatDetection");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.Delivery", b =>
                {
                    b.HasOne("SafeRouteDashBoard.Data.Entities.Driver", "Driver")
                        .WithMany("Deliveries")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.DeviceStatus", b =>
                {
                    b.HasOne("SafeRouteDashBoard.Data.Entities.Driver", "Driver")
                        .WithMany("DeviceStatuses")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.Dispatcher", b =>
                {
                    b.HasOne("SafeRouteDashBoard.Data.Entities.UserEntity", "User")
                        .WithMany("Dispatchers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.Driver", b =>
                {
                    b.HasOne("SafeRouteDashBoard.Data.Entities.UserEntity", "User")
                        .WithMany("Drivers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.EmergencyContact", b =>
                {
                    b.HasOne("SafeRouteDashBoard.Data.Entities.Driver", "Driver")
                        .WithMany("EmergencyContacts")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.Incident", b =>
                {
                    b.HasOne("SafeRouteDashBoard.Data.Entities.Driver", "Driver")
                        .WithMany("Incidents")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.IncidentResponse", b =>
                {
                    b.HasOne("SafeRouteDashBoard.Data.Entities.Dispatcher", "Dispatcher")
                        .WithMany("IncidentResponses")
                        .HasForeignKey("DispatcherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SafeRouteDashBoard.Data.Entities.Incident", "Incident")
                        .WithMany("Responses")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dispatcher");

                    b.Navigation("Incident");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.LocationUpdate", b =>
                {
                    b.HasOne("SafeRouteDashBoard.Data.Entities.Driver", "Driver")
                        .WithMany("LocationUpdates")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.PanicAlert", b =>
                {
                    b.HasOne("SafeRouteDashBoard.Data.Entities.Dispatcher", "Dispatcher")
                        .WithMany("AcknowledgedAlerts")
                        .HasForeignKey("AcknowledgedByDispatcher")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SafeRouteDashBoard.Data.Entities.Driver", "Driver")
                        .WithMany("PanicAlerts")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dispatcher");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.SafetyScore", b =>
                {
                    b.HasOne("SafeRouteDashBoard.Data.Entities.Driver", "Driver")
                        .WithMany("SafetyScores")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.UserEntity", b =>
                {
                    b.HasOne("SafeRouteDashBoard.Data.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.ZoneEntry", b =>
                {
                    b.HasOne("SafeRouteDashBoard.Data.Entities.Driver", "Driver")
                        .WithMany("ZoneEntries")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SafeRouteDashBoard.Data.Entities.Geofence", "Geofence")
                        .WithMany("ZoneEntries")
                        .HasForeignKey("GeofenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Geofence");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.Company", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.Dispatcher", b =>
                {
                    b.Navigation("AcknowledgedAlerts");

                    b.Navigation("IncidentResponses");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.Driver", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("DeviceStatuses");

                    b.Navigation("EmergencyContacts");

                    b.Navigation("Incidents");

                    b.Navigation("LocationUpdates");

                    b.Navigation("PanicAlerts");

                    b.Navigation("SafetyScores");

                    b.Navigation("ZoneEntries");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.Geofence", b =>
                {
                    b.Navigation("ZoneEntries");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.Incident", b =>
                {
                    b.Navigation("CameraRecordings");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.ThreatDetection", b =>
                {
                    b.Navigation("CameraRecordings");
                });

            modelBuilder.Entity("SafeRouteDashBoard.Data.Entities.UserEntity", b =>
                {
                    b.Navigation("Dispatchers");

                    b.Navigation("Drivers");
                });
#pragma warning restore 612, 618
        }
    }
}
